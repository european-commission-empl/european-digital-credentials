/**
 * API
 * API Swagger description
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiErrorMessage } from '../model/apiErrorMessage';
import { ByteArrayResource } from '../model/byteArrayResource';
import { CredentialBaseView } from '../model/credentialBaseView';
import { EuropassCredentialPresentationView } from '../model/europassCredentialPresentationView';
import { EuropassDiplomaView } from '../model/europassDiplomaView';
import { ResourceShareLinkInfoView } from '../model/resourceShareLinkInfoView';
import { ShareLinkView } from '../model/shareLinkView';
import { UserDetailsView } from '../model/userDetailsView';
import { VerificationCheckView } from '../model/verificationCheckView';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class V1Service {

    protected basePath = 'http://localhost:8080/europass2/edci-viewer/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create Share Link of a Credential
     * 
     * @param userId The Wallet Address where the credentials are stored
     * @param uuid The ID of the credential
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createShareLink(userId: string, uuid: string, body?: ShareLinkView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceShareLinkInfoView>;
    public createShareLink(userId: string, uuid: string, body?: ShareLinkView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceShareLinkInfoView>>;
    public createShareLink(userId: string, uuid: string, body?: ShareLinkView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceShareLinkInfoView>>;
    public createShareLink(userId: string, uuid: string, body?: ShareLinkView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling createShareLink.');
        }

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling createShareLink.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceShareLinkInfoView>(`${this.basePath}/v1/credentials/${encodeURIComponent(String(userId))}/credentials/${encodeURIComponent(String(uuid))}/sharelinks`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Downloads a credential in XML format
     * 
     * @param userId 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadCredentialXML(userId: string, body?: CredentialBaseView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public downloadCredentialXML(userId: string, body?: CredentialBaseView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public downloadCredentialXML(userId: string, body?: CredentialBaseView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public downloadCredentialXML(userId: string, body?: CredentialBaseView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling downloadCredentialXML.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<string>>(`${this.basePath}/v1/credentials/${encodeURIComponent(String(userId))}/credential`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Shared Credential XML
     * 
     * @param shareHash 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadShareLinkCredentialXML(shareHash: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public downloadShareLinkCredentialXML(shareHash: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public downloadShareLinkCredentialXML(shareHash: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public downloadShareLinkCredentialXML(shareHash: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling downloadShareLinkCredentialXML.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/v1/sharelinks/${encodeURIComponent(String(shareHash))}/credential`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Shared Presentation XML
     * 
     * @param shareHash 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadShareLinkPresentationXML(shareHash: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public downloadShareLinkPresentationXML(shareHash: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public downloadShareLinkPresentationXML(shareHash: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public downloadShareLinkPresentationXML(shareHash: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling downloadShareLinkPresentationXML.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/v1/sharelinks/${encodeURIComponent(String(shareHash))}/presentation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Downloads a file containing verifiable presentation of the credential
     * 
     * @param file 
     * @param pdfType The information that we want into the PDF: full/diploma. By default Diploma
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadVerifiablePresentationPDFFromFile(file: Blob, pdfType?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ByteArrayResource>;
    public downloadVerifiablePresentationPDFFromFile(file: Blob, pdfType?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteArrayResource>>;
    public downloadVerifiablePresentationPDFFromFile(file: Blob, pdfType?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteArrayResource>>;
    public downloadVerifiablePresentationPDFFromFile(file: Blob, pdfType?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling downloadVerifiablePresentationPDFFromFile.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pdfType !== undefined && pdfType !== null) {
            queryParameters = queryParameters.set('pdfType', <any>pdfType);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<ByteArrayResource>(`${this.basePath}/v1/credentials/presentation`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Downloads a file containing verifiable presentation of the credential in XML format
     * 
     * @param userId 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadVerificationXML(userId: string, body?: CredentialBaseView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public downloadVerificationXML(userId: string, body?: CredentialBaseView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public downloadVerificationXML(userId: string, body?: CredentialBaseView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public downloadVerificationXML(userId: string, body?: CredentialBaseView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling downloadVerificationXML.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<string>>(`${this.basePath}/v1/credentials/${encodeURIComponent(String(userId))}/verifiable`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get detailed representation of a diploma from XML
     * 
     * @param file 
     * @param locale 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCredentialDetail(file: Blob, locale: string, observe?: 'body', reportProgress?: boolean): Observable<EuropassCredentialPresentationView>;
    public getCredentialDetail(file: Blob, locale: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EuropassCredentialPresentationView>>;
    public getCredentialDetail(file: Blob, locale: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EuropassCredentialPresentationView>>;
    public getCredentialDetail(file: Blob, locale: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling getCredentialDetail.');
        }

        if (locale === null || locale === undefined) {
            throw new Error('Required parameter locale was null or undefined when calling getCredentialDetail.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<EuropassCredentialPresentationView>(`${this.basePath}/v1/credentials/details`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get detailed representation of a Diploma stored in a wallet
     * 
     * @param userId 
     * @param uuid 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCredentialDetail_1(userId: string, uuid: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<EuropassCredentialPresentationView>;
    public getCredentialDetail_1(userId: string, uuid: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EuropassCredentialPresentationView>>;
    public getCredentialDetail_1(userId: string, uuid: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EuropassCredentialPresentationView>>;
    public getCredentialDetail_1(userId: string, uuid: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getCredentialDetail_1.');
        }

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getCredentialDetail_1.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EuropassCredentialPresentationView>(`${this.basePath}/v1/credentials/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(uuid))}/details`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get visual representation of a diploma from XML
     * 
     * @param file 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCredentialDiploma(file: Blob, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<EuropassDiplomaView>;
    public getCredentialDiploma(file: Blob, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EuropassDiplomaView>>;
    public getCredentialDiploma(file: Blob, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EuropassDiplomaView>>;
    public getCredentialDiploma(file: Blob, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling getCredentialDiploma.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<EuropassDiplomaView>(`${this.basePath}/v1/credentials/diploma`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get verification report from a credential
     * 
     * @param file 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCredentialVerification(file: Blob, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VerificationCheckView>>;
    public getCredentialVerification(file: Blob, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VerificationCheckView>>>;
    public getCredentialVerification(file: Blob, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VerificationCheckView>>>;
    public getCredentialVerification(file: Blob, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling getCredentialVerification.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<Array<VerificationCheckView>>(`${this.basePath}/v1/credentials/verification`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get verification report from wallet credential uuid
     * 
     * @param userId 
     * @param uuid 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCredentialVerificationByWalletAddressID(userId: string, uuid: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VerificationCheckView>>;
    public getCredentialVerificationByWalletAddressID(userId: string, uuid: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VerificationCheckView>>>;
    public getCredentialVerificationByWalletAddressID(userId: string, uuid: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VerificationCheckView>>>;
    public getCredentialVerificationByWalletAddressID(userId: string, uuid: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getCredentialVerificationByWalletAddressID.');
        }

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getCredentialVerificationByWalletAddressID.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<VerificationCheckView>>(`${this.basePath}/v1/credentials/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(uuid))}/verify`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get verification from a credential XML
     * 
     * @param shareHash 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getShareLinkCredentialVerification(shareHash: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VerificationCheckView>>;
    public getShareLinkCredentialVerification(shareHash: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VerificationCheckView>>>;
    public getShareLinkCredentialVerification(shareHash: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VerificationCheckView>>>;
    public getShareLinkCredentialVerification(shareHash: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling getShareLinkCredentialVerification.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<VerificationCheckView>>(`${this.basePath}/v1/sharelinks/${encodeURIComponent(String(shareHash))}/verify`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Details of a shared credential
     * 
     * @param shareHash 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSharedCredentialDetails(shareHash: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<EuropassCredentialPresentationView>;
    public getSharedCredentialDetails(shareHash: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EuropassCredentialPresentationView>>;
    public getSharedCredentialDetails(shareHash: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EuropassCredentialPresentationView>>;
    public getSharedCredentialDetails(shareHash: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling getSharedCredentialDetails.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EuropassCredentialPresentationView>(`${this.basePath}/v1/sharelinks/${encodeURIComponent(String(shareHash))}/details`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get visual representation of a diploma from a ShareLink
     * 
     * @param shareHash 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSharedCredentialDiploma(shareHash: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<EuropassDiplomaView>;
    public getSharedCredentialDiploma(shareHash: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EuropassDiplomaView>>;
    public getSharedCredentialDiploma(shareHash: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EuropassDiplomaView>>;
    public getSharedCredentialDiploma(shareHash: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling getSharedCredentialDiploma.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EuropassDiplomaView>(`${this.basePath}/v1/sharelinks/${encodeURIComponent(String(shareHash))}/diploma`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets user details or isAuthenticated:false if not authenticated
     * 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserDetails(locale?: string, observe?: 'body', reportProgress?: boolean): Observable<UserDetailsView>;
    public getUserDetails(locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDetailsView>>;
    public getUserDetails(locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDetailsView>>;
    public getUserDetails(locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<UserDetailsView>(`${this.basePath}/v1/users/details`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Visual representation of a diploma from Wallet Address and CredUUID
     * 
     * @param userId 
     * @param uuid 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWalletDiplomaHTML(userId: string, uuid: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<EuropassDiplomaView>;
    public getWalletDiplomaHTML(userId: string, uuid: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EuropassDiplomaView>>;
    public getWalletDiplomaHTML(userId: string, uuid: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EuropassDiplomaView>>;
    public getWalletDiplomaHTML(userId: string, uuid: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getWalletDiplomaHTML.');
        }

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getWalletDiplomaHTML.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EuropassDiplomaView>(`${this.basePath}/v1/credentials/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(uuid))}/diploma`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
