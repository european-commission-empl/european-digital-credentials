/**
 * API
 * API Swagger description
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AccreditationLiteView } from '../model/accreditationLiteView';
import { AccreditationSpecView } from '../model/accreditationSpecView';
import { ApiErrorMessage } from '../model/apiErrorMessage';
import { AssessmentSpecView } from '../model/assessmentSpecView';
import { CodeDTView } from '../model/codeDTView';
import { CredentialDownloadView } from '../model/credentialDownloadView';
import { CredentialFileUploadResponseView } from '../model/credentialFileUploadResponseView';
import { CredentialView } from '../model/credentialView';
import { CustomizableSpecView } from '../model/customizableSpecView';
import { CustomizedRecipientsView } from '../model/customizedRecipientsView';
import { DiplomaSpecView } from '../model/diplomaSpecView';
import { EntitlementSpecView } from '../model/entitlementSpecView';
import { EuropassCredentialSpecView } from '../model/europassCredentialSpecView';
import { LearningAchievementSpecView } from '../model/learningAchievementSpecView';
import { LearningActivitySpecView } from '../model/learningActivitySpecView';
import { LearningOutcomeSpecView } from '../model/learningOutcomeSpecView';
import { LocalSignatureRequestView } from '../model/localSignatureRequestView';
import { OrganizationSpecView } from '../model/organizationSpecView';
import { Page } from '../model/page';
import { PagedResourcesAccreditationSpecLiteView } from '../model/pagedResourcesAccreditationSpecLiteView';
import { PagedResourcesAssessmentSpecLiteView } from '../model/pagedResourcesAssessmentSpecLiteView';
import { PagedResourcesDiplomaSpecLiteView } from '../model/pagedResourcesDiplomaSpecLiteView';
import { PagedResourcesEntitlementSpecLiteView } from '../model/pagedResourcesEntitlementSpecLiteView';
import { PagedResourcesEuropassCredentialSpecLiteView } from '../model/pagedResourcesEuropassCredentialSpecLiteView';
import { PagedResourcesLearningAchievementSpecLiteView } from '../model/pagedResourcesLearningAchievementSpecLiteView';
import { PagedResourcesLearningActivitySpecLiteView } from '../model/pagedResourcesLearningActivitySpecLiteView';
import { PagedResourcesLearningOutcomeSpecLiteView } from '../model/pagedResourcesLearningOutcomeSpecLiteView';
import { PagedResourcesOrganizationSpecLiteView } from '../model/pagedResourcesOrganizationSpecLiteView';
import { PublicSealAndSendView } from '../model/publicSealAndSendView';
import { ResourceAccreditationSpecView } from '../model/resourceAccreditationSpecView';
import { ResourceAssessmentSpecView } from '../model/resourceAssessmentSpecView';
import { ResourceAssessmentsListIssueView } from '../model/resourceAssessmentsListIssueView';
import { ResourceCustomizableInstanceSpecView } from '../model/resourceCustomizableInstanceSpecView';
import { ResourceCustomizableSpecView } from '../model/resourceCustomizableSpecView';
import { ResourceDiplomaSpecView } from '../model/resourceDiplomaSpecView';
import { ResourceEntitlementSpecView } from '../model/resourceEntitlementSpecView';
import { ResourceEuropassCredentialSpecView } from '../model/resourceEuropassCredentialSpecView';
import { ResourceLearningAchievementSpecView } from '../model/resourceLearningAchievementSpecView';
import { ResourceLearningActivitySpecView } from '../model/resourceLearningActivitySpecView';
import { ResourceLearningOutcomeSpecView } from '../model/resourceLearningOutcomeSpecView';
import { ResourceOrganizationSpecView } from '../model/resourceOrganizationSpecView';
import { SignatureBytesView } from '../model/signatureBytesView';
import { SignatureNexuView } from '../model/signatureNexuView';
import { SignatureParametersView } from '../model/signatureParametersView';
import { SimpleIdView } from '../model/simpleIdView';
import { StatusView } from '../model/statusView';
import { SubresourcesOids } from '../model/subresourcesOids';
import { UserDetailsView } from '../model/userDetailsView';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class V1Service {

    protected basePath = 'http://localhost:8080/europass2/edci-issuer/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Upload a diploma background
     * 
     * @param oid The Diploma oid
     * @param file The Logo file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addBackground(oid: number, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addBackground(oid: number, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addBackground(oid: number, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addBackground(oid: number, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling addBackground.');
        }

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling addBackground.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('_file', <any>file) || formParams;
        }

        return this.httpClient.post<any>(`${this.basePath}/v1/diploma/specs/${encodeURIComponent(String(oid))}/background`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload some credentials in JSON
     * 
     * @param files the Json file containing the EuropeanDigitalCredentialUpload
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCredentials(files: Array<Blob>, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<CredentialFileUploadResponseView>;
    public addCredentials(files: Array<Blob>, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CredentialFileUploadResponseView>>;
    public addCredentials(files: Array<Blob>, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CredentialFileUploadResponseView>>;
    public addCredentials(files: Array<Blob>, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (files === null || files === undefined) {
            throw new Error('Required parameter files was null or undefined when calling addCredentials.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (files) {
            files.forEach((element) => {
                formParams = formParams.append('_files', <any>element) || formParams;
            })
        }

        return this.httpClient.post<CredentialFileUploadResponseView>(`${this.basePath}/v1/credentials/upload`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload a organization logo
     * 
     * @param oid The Organization oid
     * @param file The Logo file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addLogo(oid: number, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addLogo(oid: number, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addLogo(oid: number, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addLogo(oid: number, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling addLogo.');
        }

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling addLogo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('_file', <any>file) || formParams;
        }

        return this.httpClient.post<any>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}/logo`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Seal a set of credentials and send them to the configured wallet
     * 
     * @param files the JSON files containing the credential
     * @param password the password for the local certificate
     * @param signOnBehalf indicates that the credential should be signed on behalf of another organization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batchSealAndSendCredentials(files: Array<Blob>, password: string, signOnBehalf?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batchSealAndSendCredentials(files: Array<Blob>, password: string, signOnBehalf?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batchSealAndSendCredentials(files: Array<Blob>, password: string, signOnBehalf?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batchSealAndSendCredentials(files: Array<Blob>, password: string, signOnBehalf?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (files === null || files === undefined) {
            throw new Error('Required parameter files was null or undefined when calling batchSealAndSendCredentials.');
        }

        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling batchSealAndSendCredentials.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('password', <any>password);
        }
        if (signOnBehalf !== undefined && signOnBehalf !== null) {
            queryParameters = queryParameters.set('signOnBehalf', <any>signOnBehalf);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (files) {
            files.forEach((element) => {
                formParams = formParams.append('_files', <any>element) || formParams;
            })
        }

        return this.httpClient.post<any>(`${this.basePath}/v1/public/credentials/seal_batch`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an accreditation spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAccreditation(body?: AccreditationSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceAccreditationSpecView>;
    public createAccreditation(body?: AccreditationSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAccreditationSpecView>>;
    public createAccreditation(body?: AccreditationSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAccreditationSpecView>>;
    public createAccreditation(body?: AccreditationSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceAccreditationSpecView>(`${this.basePath}/v1/accreditations/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an assessment spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAssessment(body?: AssessmentSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceAssessmentSpecView>;
    public createAssessment(body?: AssessmentSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAssessmentSpecView>>;
    public createAssessment(body?: AssessmentSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAssessmentSpecView>>;
    public createAssessment(body?: AssessmentSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceAssessmentSpecView>(`${this.basePath}/v1/assessments/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a credential spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCredential(body?: EuropassCredentialSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceEuropassCredentialSpecView>;
    public createCredential(body?: EuropassCredentialSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceEuropassCredentialSpecView>>;
    public createCredential(body?: EuropassCredentialSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceEuropassCredentialSpecView>>;
    public createCredential(body?: EuropassCredentialSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceEuropassCredentialSpecView>(`${this.basePath}/v1/credentials/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an diploma spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createDiploma(body?: DiplomaSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceDiplomaSpecView>;
    public createDiploma(body?: DiplomaSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceDiplomaSpecView>>;
    public createDiploma(body?: DiplomaSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceDiplomaSpecView>>;
    public createDiploma(body?: DiplomaSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceDiplomaSpecView>(`${this.basePath}/v1/diploma/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an entitlement spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createEntitlement(body?: EntitlementSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceEntitlementSpecView>;
    public createEntitlement(body?: EntitlementSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceEntitlementSpecView>>;
    public createEntitlement(body?: EntitlementSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceEntitlementSpecView>>;
    public createEntitlement(body?: EntitlementSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceEntitlementSpecView>(`${this.basePath}/v1/entitlements/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an learningAchievement spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createLearningAchievement(body?: LearningAchievementSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLearningAchievementSpecView>;
    public createLearningAchievement(body?: LearningAchievementSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLearningAchievementSpecView>>;
    public createLearningAchievement(body?: LearningAchievementSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLearningAchievementSpecView>>;
    public createLearningAchievement(body?: LearningAchievementSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceLearningAchievementSpecView>(`${this.basePath}/v1/achievements/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an learningActivity spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createLearningActivity(body?: LearningActivitySpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLearningActivitySpecView>;
    public createLearningActivity(body?: LearningActivitySpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLearningActivitySpecView>>;
    public createLearningActivity(body?: LearningActivitySpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLearningActivitySpecView>>;
    public createLearningActivity(body?: LearningActivitySpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceLearningActivitySpecView>(`${this.basePath}/v1/activities/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an learningOutcome spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createLearningOutcome(body?: LearningOutcomeSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLearningOutcomeSpecView>;
    public createLearningOutcome(body?: LearningOutcomeSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLearningOutcomeSpecView>>;
    public createLearningOutcome(body?: LearningOutcomeSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLearningOutcomeSpecView>>;
    public createLearningOutcome(body?: LearningOutcomeSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceLearningOutcomeSpecView>(`${this.basePath}/v1/learningOutcomes/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an organization spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOrganization(body?: OrganizationSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOrganizationSpecView>;
    public createOrganization(body?: OrganizationSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOrganizationSpecView>>;
    public createOrganization(body?: OrganizationSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOrganizationSpecView>>;
    public createOrganization(body?: OrganizationSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceOrganizationSpecView>(`${this.basePath}/v1/organizations/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an accreditation spec
     * 
     * @param oid The accreditation oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAccreditation(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAccreditation(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAccreditation(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAccreditation(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteAccreditation.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/accreditations/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes an existing linked organization to a Accreditation
     * 
     * @param oid The Organization oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAccreditingAgent(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAccreditingAgent(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAccreditingAgent(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAccreditingAgent(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteAccreditingAgent.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}/v1/accreditations/specs/${encodeURIComponent(String(oid))}/accreditingAgent`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an assessment spec
     * 
     * @param oid The Assessment oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAssessment(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAssessment(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAssessment(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAssessment(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteAssessment.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/assessments/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a credential spec
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCredential(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCredential(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCredential(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCredential(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteCredential.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete credential based on uuid
     * 
     * @param uuid 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCredentials(uuid: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<StatusView>;
    public deleteCredentials(uuid: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StatusView>>;
    public deleteCredentials(uuid: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StatusView>>;
    public deleteCredentials(uuid: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling deleteCredentials.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<StatusView>(`${this.basePath}/v1/credentials/${encodeURIComponent(String(uuid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes an existing linked diploma to a credential
     * 
     * @param oid The Diploma oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDiploma(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDiploma(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDiploma(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDiploma(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteDiploma.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/diploma`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an diploma spec
     * 
     * @param oid The Diploma oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDiploma_1(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDiploma_1(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDiploma_1(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDiploma_1(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteDiploma_1.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/diploma/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an entitlement spec
     * 
     * @param oid The Entitlement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteEntitlement(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteEntitlement(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteEntitlement(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteEntitlement(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteEntitlement.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/entitlements/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes the credential issuer
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteIssuer(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteIssuer(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteIssuer(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteIssuer(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteIssuer.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/issuer`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an learningAchievement spec
     * 
     * @param oid The LearningAchievement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteLearningAchievement(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteLearningAchievement(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteLearningAchievement(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteLearningAchievement(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteLearningAchievement.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an learningActivity spec
     * 
     * @param oid The LearningActivity oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteLearningActivity(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteLearningActivity(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteLearningActivity(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteLearningActivity(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteLearningActivity.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/activities/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an learningOutcome spec
     * 
     * @param oid The LearningOutcome oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteLearningOutcome(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteLearningOutcome(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteLearningOutcome(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteLearningOutcome(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteLearningOutcome.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/learningOutcomes/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes an existing linked organization to a Accreditation
     * 
     * @param oid The Organization oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganisation(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteOrganisation(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteOrganisation(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteOrganisation(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteOrganisation.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}/v1/accreditations/specs/${encodeURIComponent(String(oid))}/organisation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an organization spec
     * 
     * @param oid The Organization oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganization(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteOrganization(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteOrganization(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteOrganization(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteOrganization.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes an existing subresource (Assessment)
     * 
     * @param oid The LearningAchievement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProvenBy(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteProvenBy(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteProvenBy(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteProvenBy(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteProvenBy.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/provenBy`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes an existing subresource (Organization)
     * 
     * @param oid The LearningAchievement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProvenBy_2(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteProvenBy_2(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteProvenBy_2(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteProvenBy_2(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteProvenBy_2.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/entitlements/specs/${encodeURIComponent(String(oid))}/validWith`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes an existing linked organization to a organization
     * 
     * @param oid The Organization oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSubOrganizationOf(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSubOrganizationOf(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSubOrganizationOf(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSubOrganizationOf(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteSubOrganizationOf.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}/subOrganizationOf`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes an existing linked organization to a organization
     * 
     * @param oid The Organization oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUnitOf(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteUnitOf(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteUnitOf(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteUnitOf(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteUnitOf.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}/unitOf`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Download a credential XML file
     * 
     * @param uuid 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadCredential(uuid: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public downloadCredential(uuid: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public downloadCredential(uuid: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public downloadCredential(uuid: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling downloadCredential.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/v1/credentials/${encodeURIComponent(String(uuid))}`,
            {
                params: queryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Download a credential XML file
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadTempCredentials(body?: CredentialDownloadView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public downloadTempCredentials(body?: CredentialDownloadView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public downloadTempCredentials(body?: CredentialDownloadView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public downloadTempCredentials(body?: CredentialDownloadView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/v1/credentials/download`,
            body,
            {
                params: queryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Duplicate an activity spec
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public duplicateAccreditation(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceAccreditationSpecView>;
    public duplicateAccreditation(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAccreditationSpecView>>;
    public duplicateAccreditation(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAccreditationSpecView>>;
    public duplicateAccreditation(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling duplicateAccreditation.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ResourceAccreditationSpecView>(`${this.basePath}/v1/accreditations/specs/${encodeURIComponent(String(oid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Duplicate an activity spec
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public duplicateAssessment(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceAssessmentSpecView>;
    public duplicateAssessment(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAssessmentSpecView>>;
    public duplicateAssessment(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAssessmentSpecView>>;
    public duplicateAssessment(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling duplicateAssessment.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ResourceAssessmentSpecView>(`${this.basePath}/v1/assessments/specs/${encodeURIComponent(String(oid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Duplicate a credential spec
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public duplicateCredential(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceEuropassCredentialSpecView>;
    public duplicateCredential(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceEuropassCredentialSpecView>>;
    public duplicateCredential(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceEuropassCredentialSpecView>>;
    public duplicateCredential(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling duplicateCredential.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ResourceEuropassCredentialSpecView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Duplicate a activity spec
     * 
     * @param oid The Diploma oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public duplicateDiploma(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceDiplomaSpecView>;
    public duplicateDiploma(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceDiplomaSpecView>>;
    public duplicateDiploma(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceDiplomaSpecView>>;
    public duplicateDiploma(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling duplicateDiploma.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ResourceDiplomaSpecView>(`${this.basePath}/v1/diploma/specs/${encodeURIComponent(String(oid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Duplicate an activity spec
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public duplicateEntitlement(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceEntitlementSpecView>;
    public duplicateEntitlement(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceEntitlementSpecView>>;
    public duplicateEntitlement(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceEntitlementSpecView>>;
    public duplicateEntitlement(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling duplicateEntitlement.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ResourceEntitlementSpecView>(`${this.basePath}/v1/entitlements/specs/${encodeURIComponent(String(oid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Duplicate an achievement spec
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public duplicateLearningAchievement(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLearningAchievementSpecView>;
    public duplicateLearningAchievement(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLearningAchievementSpecView>>;
    public duplicateLearningAchievement(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLearningAchievementSpecView>>;
    public duplicateLearningAchievement(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling duplicateLearningAchievement.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ResourceLearningAchievementSpecView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Duplicate an activity spec
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public duplicateLearningActivity(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLearningActivitySpecView>;
    public duplicateLearningActivity(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLearningActivitySpecView>>;
    public duplicateLearningActivity(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLearningActivitySpecView>>;
    public duplicateLearningActivity(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling duplicateLearningActivity.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ResourceLearningActivitySpecView>(`${this.basePath}/v1/activities/specs/${encodeURIComponent(String(oid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Duplicate a activity spec
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public duplicateLearningOutcome(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLearningOutcomeSpecView>;
    public duplicateLearningOutcome(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLearningOutcomeSpecView>>;
    public duplicateLearningOutcome(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLearningOutcomeSpecView>>;
    public duplicateLearningOutcome(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling duplicateLearningOutcome.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ResourceLearningOutcomeSpecView>(`${this.basePath}/v1/learningOutcomes/specs/${encodeURIComponent(String(oid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Duplicate a activity spec
     * 
     * @param oid The Organization oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public duplicateOrganization(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOrganizationSpecView>;
    public duplicateOrganization(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOrganizationSpecView>>;
    public duplicateOrganization(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOrganizationSpecView>>;
    public duplicateOrganization(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling duplicateOrganization.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ResourceOrganizationSpecView>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets an accreditation
     * 
     * @param oid The accreditation.OID
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccreditation(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceAccreditationSpecView>;
    public getAccreditation(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAccreditationSpecView>>;
    public getAccreditation(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAccreditationSpecView>>;
    public getAccreditation(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getAccreditation.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceAccreditationSpecView>(`${this.basePath}/v1/accreditations/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get accreditation
     * 
     * @param uri 
     * @param lang 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccreditations(uri: string, lang: string, observe?: 'body', reportProgress?: boolean): Observable<Array<AccreditationLiteView>>;
    public getAccreditations(uri: string, lang: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AccreditationLiteView>>>;
    public getAccreditations(uri: string, lang: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AccreditationLiteView>>>;
    public getAccreditations(uri: string, lang: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uri === null || uri === undefined) {
            throw new Error('Required parameter uri was null or undefined when calling getAccreditations.');
        }

        if (lang === null || lang === undefined) {
            throw new Error('Required parameter lang was null or undefined when calling getAccreditations.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uri !== undefined && uri !== null) {
            queryParameters = queryParameters.set('uri', <any>uri);
        }
        if (lang !== undefined && lang !== null) {
            queryParameters = queryParameters.set('lang', <any>lang);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<AccreditationLiteView>>(`${this.basePath}/v1/credentials/accreditation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of Accrediting Agents
     * 
     * @param oid The Organization oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccreditingAgent(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOrganizationSpecView>;
    public getAccreditingAgent(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOrganizationSpecView>>;
    public getAccreditingAgent(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOrganizationSpecView>>;
    public getAccreditingAgent(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getAccreditingAgent.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceOrganizationSpecView>(`${this.basePath}/v1/accreditations/specs/${encodeURIComponent(String(oid))}/accreditingAgent`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets an assessment
     * 
     * @param oid The Assessment.OID
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssessment(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceAssessmentSpecView>;
    public getAssessment(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAssessmentSpecView>>;
    public getAssessment(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAssessmentSpecView>>;
    public getAssessment(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getAssessment.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceAssessmentSpecView>(`${this.basePath}/v1/assessments/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a credential
     * 
     * @param oid The Credential.OID
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCredential(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceEuropassCredentialSpecView>;
    public getCredential(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceEuropassCredentialSpecView>>;
    public getCredential(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceEuropassCredentialSpecView>>;
    public getCredential(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getCredential.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceEuropassCredentialSpecView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Generate the customizable spec for a particular credential and Customizable spec selection
     * 
     * @param oid oid
     * @param locale locale
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCredentialSpec(oid: number, locale?: string, body?: CustomizableSpecView, observe?: 'body', reportProgress?: boolean): Observable<ResourceCustomizableInstanceSpecView>;
    public getCredentialSpec(oid: number, locale?: string, body?: CustomizableSpecView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceCustomizableInstanceSpecView>>;
    public getCredentialSpec(oid: number, locale?: string, body?: CustomizableSpecView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceCustomizableInstanceSpecView>>;
    public getCredentialSpec(oid: number, locale?: string, body?: CustomizableSpecView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getCredentialSpec.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (oid !== undefined && oid !== null) {
            queryParameters = queryParameters.set('oid', <any>oid);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceCustomizableInstanceSpecView>(`${this.basePath}/v1/credentials/specs/recipients/fields`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Downloads an XLS Customizable templat
     * 
     * @param oid 
     * @param locale locale
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCredentialSpecXLSTemplate(oid: number, locale?: string, body?: CustomizableSpecView, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getCredentialSpecXLSTemplate(oid: number, locale?: string, body?: CustomizableSpecView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getCredentialSpecXLSTemplate(oid: number, locale?: string, body?: CustomizableSpecView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getCredentialSpecXLSTemplate(oid: number, locale?: string, body?: CustomizableSpecView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getCredentialSpecXLSTemplate.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/recipients/templates`,
            body,
            {
                params: queryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Downloads an XLS template to add credentials 
     * 
     * @param type 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCredentialTemplate(type: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getCredentialTemplate(type: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getCredentialTemplate(type: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getCredentialTemplate(type: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getCredentialTemplate.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/v1/files/templates/${encodeURIComponent(String(type))}`,
            {
                params: queryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the credential&#39;s diploma
     * 
     * @param oid The Diploma oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDiploma(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceDiplomaSpecView>;
    public getDiploma(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceDiplomaSpecView>>;
    public getDiploma(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceDiplomaSpecView>>;
    public getDiploma(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getDiploma.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceDiplomaSpecView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/diploma`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a diploma
     * 
     * @param oid The Diploma.OID
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDiplomaSpec(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceDiplomaSpecView>;
    public getDiplomaSpec(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceDiplomaSpecView>>;
    public getDiplomaSpec(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceDiplomaSpecView>>;
    public getDiplomaSpec(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getDiplomaSpec.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceDiplomaSpecView>(`${this.basePath}/v1/diploma/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets an entitlement
     * 
     * @param oid The Entitlement.OID
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEntitlement(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceEntitlementSpecView>;
    public getEntitlement(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceEntitlementSpecView>>;
    public getEntitlement(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceEntitlementSpecView>>;
    public getEntitlement(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getEntitlement.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceEntitlementSpecView>(`${this.basePath}/v1/entitlements/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Generates and returns a list of the current available customizable fields
     * 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFullCustomizableSpec(locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceCustomizableSpecView>;
    public getFullCustomizableSpec(locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceCustomizableSpecView>>;
    public getFullCustomizableSpec(locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceCustomizableSpecView>>;
    public getFullCustomizableSpec(locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceCustomizableSpecView>(`${this.basePath}/v1/credentials/specs/recipients/fields`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the credential issuer
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIssuer(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOrganizationSpecView>;
    public getIssuer(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOrganizationSpecView>>;
    public getIssuer(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOrganizationSpecView>>;
    public getIssuer(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getIssuer.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceOrganizationSpecView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/issuer`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all the assessments for the issue form
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIssuerAssessmentGrades(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceAssessmentsListIssueView>;
    public getIssuerAssessmentGrades(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAssessmentsListIssueView>>;
    public getIssuerAssessmentGrades(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAssessmentsListIssueView>>;
    public getIssuerAssessmentGrades(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getIssuerAssessmentGrades.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceAssessmentsListIssueView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/issueAssessments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets an learningAchievement
     * 
     * @param oid The LearningAchievement.OID
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLearningAchievement(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLearningAchievementSpecView>;
    public getLearningAchievement(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLearningAchievementSpecView>>;
    public getLearningAchievement(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLearningAchievementSpecView>>;
    public getLearningAchievement(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getLearningAchievement.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceLearningAchievementSpecView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets an learningActivity
     * 
     * @param oid The LearningActivity.OID
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLearningActivity(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLearningActivitySpecView>;
    public getLearningActivity(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLearningActivitySpecView>>;
    public getLearningActivity(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLearningActivitySpecView>>;
    public getLearningActivity(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getLearningActivity.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceLearningActivitySpecView>(`${this.basePath}/v1/activities/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets an learningOutcome
     * 
     * @param oid The LearningOutcome.OID
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLearningOutcome(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLearningOutcomeSpecView>;
    public getLearningOutcome(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLearningOutcomeSpecView>>;
    public getLearningOutcome(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLearningOutcomeSpecView>>;
    public getLearningOutcome(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getLearningOutcome.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceLearningOutcomeSpecView>(`${this.basePath}/v1/learningOutcomes/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets an organization
     * 
     * @param oid The Organization.OID
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrganization(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOrganizationSpecView>;
    public getOrganization(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOrganizationSpecView>>;
    public getOrganization(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOrganizationSpecView>>;
    public getOrganization(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getOrganization.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceOrganizationSpecView>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list subresources (Assessment)
     * 
     * @param oid The LearningAchievement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProvenBy(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesAssessmentSpecLiteView>;
    public getProvenBy(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesAssessmentSpecLiteView>>;
    public getProvenBy(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesAssessmentSpecLiteView>>;
    public getProvenBy(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getProvenBy.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesAssessmentSpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/provenBy`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Bytes from Signature parameters
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSignatureBytes(body?: SignatureParametersView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SignatureBytesView>>;
    public getSignatureBytes(body?: SignatureParametersView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SignatureBytesView>>>;
    public getSignatureBytes(body?: SignatureParametersView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SignatureBytesView>>>;
    public getSignatureBytes(body?: SignatureParametersView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SignatureBytesView>>(`${this.basePath}/v1/credentials/signature-bytes`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of SubOrganisation organizations
     * 
     * @param oid The Organization oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubOrganizationOf(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOrganizationSpecView>;
    public getSubOrganizationOf(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOrganizationSpecView>>;
    public getSubOrganizationOf(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOrganizationSpecView>>;
    public getSubOrganizationOf(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getSubOrganizationOf.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceOrganizationSpecView>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}/subOrganizationOf`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a Test Credential for Nexus Signature
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestCredential(observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getTestCredential(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getTestCredential(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getTestCredential(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/v1/credentials/testCredential`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of hasUnit organizations
     * 
     * @param oid The Organization oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUnitOf(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOrganizationSpecView>;
    public getUnitOf(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOrganizationSpecView>>;
    public getUnitOf(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOrganizationSpecView>>;
    public getUnitOf(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getUnitOf.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceOrganizationSpecView>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}/unitOf`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets user details or isAuthenticated:false if not authenticated
     * 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserDetails(locale?: string, observe?: 'body', reportProgress?: boolean): Observable<UserDetailsView>;
    public getUserDetails(locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDetailsView>>;
    public getUserDetails(locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDetailsView>>;
    public getUserDetails(locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<UserDetailsView>(`${this.basePath}/v1/users/details`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a subresource (Organization)
     * 
     * @param oid The Organization oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getValidWith(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public getValidWith(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public getValidWith(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public getValidWith(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getValidWith.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/entitlements/specs/${encodeURIComponent(String(oid))}/validWith`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns true if an accreditation exists given an Id
     * 
     * @param body accreditation ID
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isAccreditationValid(body?: SimpleIdView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isAccreditationValid(body?: SimpleIdView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isAccreditationValid(body?: SimpleIdView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isAccreditationValid(body?: SimpleIdView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/v1/accreditations/check`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Issue a credential from a json object
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public issueCredentialsFromRecipientsForm(body?: CustomizedRecipientsView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<CredentialFileUploadResponseView>;
    public issueCredentialsFromRecipientsForm(body?: CustomizedRecipientsView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CredentialFileUploadResponseView>>;
    public issueCredentialsFromRecipientsForm(body?: CustomizedRecipientsView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CredentialFileUploadResponseView>>;
    public issueCredentialsFromRecipientsForm(body?: CustomizedRecipientsView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CredentialFileUploadResponseView>(`${this.basePath}/v1/credentials/issue`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Issue a credential from a xls template file
     * 
     * @param file the XLS file with the recipìents information
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public issueCredentialsFromRecipientsXLS(file: Blob, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<CredentialFileUploadResponseView>;
    public issueCredentialsFromRecipientsXLS(file: Blob, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CredentialFileUploadResponseView>>;
    public issueCredentialsFromRecipientsXLS(file: Blob, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CredentialFileUploadResponseView>>;
    public issueCredentialsFromRecipientsXLS(file: Blob, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling issueCredentialsFromRecipientsXLS.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('_file', <any>file) || formParams;
        }

        return this.httpClient.post<CredentialFileUploadResponseView>(`${this.basePath}/v1/credentials/issue/templates`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of accreditations
     * 
     * @param sort 
     * @param direction 
     * @param page 
     * @param size 
     * @param search 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAccreditation(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesAccreditationSpecLiteView>;
    public listAccreditation(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesAccreditationSpecLiteView>>;
    public listAccreditation(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesAccreditationSpecLiteView>>;
    public listAccreditation(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesAccreditationSpecLiteView>(`${this.basePath}/v1/accreditations/specs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAchieved(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningAchievementSpecLiteView>;
    public listAchieved(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningAchievementSpecLiteView>>;
    public listAchieved(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningAchievementSpecLiteView>>;
    public listAchieved(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listAchieved.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesLearningAchievementSpecLiteView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/achieved`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The LearningAchievement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAchsAccreditation(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesAccreditationSpecLiteView>;
    public listAchsAccreditation(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesAccreditationSpecLiteView>>;
    public listAchsAccreditation(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesAccreditationSpecLiteView>>;
    public listAchsAccreditation(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listAchsAccreditation.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesAccreditationSpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/accreditation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAssessed(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesAssessmentSpecLiteView>;
    public listAssessed(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesAssessmentSpecLiteView>>;
    public listAssessed(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesAssessmentSpecLiteView>>;
    public listAssessed(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listAssessed.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesAssessmentSpecLiteView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/assessedBy`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of (AssessedBy) Organization from assessments
     * 
     * @param oid The Assessment oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAssessedBy(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public listAssessedBy(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public listAssessedBy(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public listAssessedBy(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listAssessedBy.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/assessments/specs/${encodeURIComponent(String(oid))}/assessedBy`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of assessments
     * 
     * @param sort 
     * @param direction 
     * @param page 
     * @param size 
     * @param search 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAssessment(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesAssessmentSpecLiteView>;
    public listAssessment(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesAssessmentSpecLiteView>>;
    public listAssessment(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesAssessmentSpecLiteView>>;
    public listAssessment(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesAssessmentSpecLiteView>(`${this.basePath}/v1/assessments/specs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The LearningAchievement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAwardingBodiesAch(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public listAwardingBodiesAch(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public listAwardingBodiesAch(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public listAwardingBodiesAch(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listAwardingBodiesAch.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/awardingBody`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The LearningActivity oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAwardingBodiesAct(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public listAwardingBodiesAct(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public listAwardingBodiesAct(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public listAwardingBodiesAct(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listAwardingBodiesAct.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/activities/specs/${encodeURIComponent(String(oid))}/awardingBody`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The Assessment oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAwardingBodiesAsm(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public listAwardingBodiesAsm(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public listAwardingBodiesAsm(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public listAwardingBodiesAsm(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listAwardingBodiesAsm.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/assessments/specs/${encodeURIComponent(String(oid))}/awardingBody`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The Entitlement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAwardingBodiesEnt(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public listAwardingBodiesEnt(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public listAwardingBodiesEnt(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public listAwardingBodiesEnt(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listAwardingBodiesEnt.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/entitlements/specs/${encodeURIComponent(String(oid))}/awardingBody`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of ChildOrganisation organizations
     * 
     * @param oid The Organization oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listChildOrganisation(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public listChildOrganisation(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public listChildOrganisation(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public listChildOrganisation(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listChildOrganisation.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}/childOrganisation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of credentials
     * 
     * @param sort 
     * @param direction 
     * @param page 
     * @param size 
     * @param search 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listCredential(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesEuropassCredentialSpecLiteView>;
    public listCredential(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesEuropassCredentialSpecLiteView>>;
    public listCredential(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesEuropassCredentialSpecLiteView>>;
    public listCredential(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesEuropassCredentialSpecLiteView>(`${this.basePath}/v1/credentials/specs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of diplomas
     * 
     * @param sort 
     * @param direction 
     * @param page 
     * @param size 
     * @param search 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listDiploma(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesDiplomaSpecLiteView>;
    public listDiploma(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesDiplomaSpecLiteView>>;
    public listDiploma(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesDiplomaSpecLiteView>>;
    public listDiploma(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesDiplomaSpecLiteView>(`${this.basePath}/v1/diploma/specs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of (DirectedBy) Organizations from learningActivities
     * 
     * @param oid The LearningActivity oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listDirectedBy(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public listDirectedBy(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public listDirectedBy(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public listDirectedBy(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listDirectedBy.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/activities/specs/${encodeURIComponent(String(oid))}/directedBy`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of resources
     * 
     * @param type The entity type
     * @param page 
     * @param size 
     * @param sort 
     * @param direction 
     * @param search 
     * @param parent 
     * @param requestedLangs 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listEntities(type: string, page?: number, size?: number, sort?: string, direction?: string, search?: string, parent?: string, requestedLangs?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Page>;
    public listEntities(type: string, page?: number, size?: number, sort?: string, direction?: string, search?: string, parent?: string, requestedLangs?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Page>>;
    public listEntities(type: string, page?: number, size?: number, sort?: string, direction?: string, search?: string, parent?: string, requestedLangs?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Page>>;
    public listEntities(type: string, page?: number, size?: number, sort?: string, direction?: string, search?: string, parent?: string, requestedLangs?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling listEntities.');
        }









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (parent !== undefined && parent !== null) {
            queryParameters = queryParameters.set('parent', <any>parent);
        }
        if (requestedLangs !== undefined && requestedLangs !== null) {
            queryParameters = queryParameters.set('requestedLangs', <any>requestedLangs);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Page>(`${this.basePath}/v1/data/${encodeURIComponent(String(type))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get some resources by uri
     * 
     * @param type The entity type
     * @param uris 
     * @param requestedLangs 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listEntitiesByUri(type: string, uris: string, requestedLangs?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CodeDTView>>;
    public listEntitiesByUri(type: string, uris: string, requestedLangs?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CodeDTView>>>;
    public listEntitiesByUri(type: string, uris: string, requestedLangs?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CodeDTView>>>;
    public listEntitiesByUri(type: string, uris: string, requestedLangs?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling listEntitiesByUri.');
        }

        if (uris === null || uris === undefined) {
            throw new Error('Required parameter uris was null or undefined when calling listEntitiesByUri.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uris !== undefined && uris !== null) {
            queryParameters = queryParameters.set('uris', <any>uris);
        }
        if (requestedLangs !== undefined && requestedLangs !== null) {
            queryParameters = queryParameters.set('requestedLangs', <any>requestedLangs);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CodeDTView>>(`${this.basePath}/v1/data/entity/${encodeURIComponent(String(type))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listEntitledTo(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesEntitlementSpecLiteView>;
    public listEntitledTo(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesEntitlementSpecLiteView>>;
    public listEntitledTo(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesEntitlementSpecLiteView>>;
    public listEntitledTo(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listEntitledTo.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesEntitlementSpecLiteView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/entitledTo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of entitlements
     * 
     * @param sort 
     * @param direction 
     * @param page 
     * @param size 
     * @param search 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listEntitlement(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesEntitlementSpecLiteView>;
    public listEntitlement(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesEntitlementSpecLiteView>>;
    public listEntitlement(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesEntitlementSpecLiteView>>;
    public listEntitlement(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesEntitlementSpecLiteView>(`${this.basePath}/v1/entitlements/specs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The LearningAchievement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listEntitlesTo(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesEntitlementSpecLiteView>;
    public listEntitlesTo(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesEntitlementSpecLiteView>>;
    public listEntitlesTo(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesEntitlementSpecLiteView>>;
    public listEntitlesTo(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listEntitlesTo.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesEntitlementSpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/entitlesTo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of (hasPart) LearningActivity from learningActivities
     * 
     * @param oid The LearningActivity oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listHasActPart(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningActivitySpecLiteView>;
    public listHasActPart(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningActivitySpecLiteView>>;
    public listHasActPart(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningActivitySpecLiteView>>;
    public listHasActPart(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listHasActPart.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesLearningActivitySpecLiteView>(`${this.basePath}/v1/activities/specs/${encodeURIComponent(String(oid))}/hasPart`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of (hasPart) Assessments from assessments
     * 
     * @param oid The Assessment oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listHasAssPart(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesAssessmentSpecLiteView>;
    public listHasAssPart(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesAssessmentSpecLiteView>>;
    public listHasAssPart(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesAssessmentSpecLiteView>>;
    public listHasAssPart(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listHasAssPart.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesAssessmentSpecLiteView>(`${this.basePath}/v1/assessments/specs/${encodeURIComponent(String(oid))}/hasPart`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of (hasPart) Entitlements from entitlements
     * 
     * @param oid The Entitlement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listHasEntPart(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesEntitlementSpecLiteView>;
    public listHasEntPart(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesEntitlementSpecLiteView>>;
    public listHasEntPart(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesEntitlementSpecLiteView>>;
    public listHasEntPart(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listHasEntPart.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesEntitlementSpecLiteView>(`${this.basePath}/v1/entitlements/specs/${encodeURIComponent(String(oid))}/hasPart`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of hasUnit organizations
     * 
     * @param oid The Organization oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listHasUnit(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public listHasUnit(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public listHasUnit(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public listHasUnit(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listHasUnit.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}/hasUnits`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of (Influenced) LearningAchievement from learningActivities
     * 
     * @param oid The LearningActivity oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listInfluenced(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningAchievementSpecLiteView>;
    public listInfluenced(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningAchievementSpecLiteView>>;
    public listInfluenced(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningAchievementSpecLiteView>>;
    public listInfluenced(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listInfluenced.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesLearningAchievementSpecLiteView>(`${this.basePath}/v1/activities/specs/${encodeURIComponent(String(oid))}/influenced`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The LearningAchievement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listInfluencedBy(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningActivitySpecLiteView>;
    public listInfluencedBy(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningActivitySpecLiteView>>;
    public listInfluencedBy(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningActivitySpecLiteView>>;
    public listInfluencedBy(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listInfluencedBy.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesLearningActivitySpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/influencedBy`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of learningAchievements
     * 
     * @param sort 
     * @param direction 
     * @param page 
     * @param size 
     * @param search 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listLearningAchievement(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningAchievementSpecLiteView>;
    public listLearningAchievement(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningAchievementSpecLiteView>>;
    public listLearningAchievement(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningAchievementSpecLiteView>>;
    public listLearningAchievement(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesLearningAchievementSpecLiteView>(`${this.basePath}/v1/achievements/specs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of learningActivities
     * 
     * @param sort 
     * @param direction 
     * @param page 
     * @param size 
     * @param search 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listLearningActivity(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningActivitySpecLiteView>;
    public listLearningActivity(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningActivitySpecLiteView>>;
    public listLearningActivity(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningActivitySpecLiteView>>;
    public listLearningActivity(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesLearningActivitySpecLiteView>(`${this.basePath}/v1/activities/specs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of learningOutcomes
     * 
     * @param sort 
     * @param direction 
     * @param page 
     * @param size 
     * @param search 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listLearningOutcome(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningOutcomeSpecLiteView>;
    public listLearningOutcome(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningOutcomeSpecLiteView>>;
    public listLearningOutcome(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningOutcomeSpecLiteView>>;
    public listLearningOutcome(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesLearningOutcomeSpecLiteView>(`${this.basePath}/v1/learningOutcomes/specs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The LearningAchievement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listLearningOutcomes(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningOutcomeSpecLiteView>;
    public listLearningOutcomes(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningOutcomeSpecLiteView>>;
    public listLearningOutcomes(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningOutcomeSpecLiteView>>;
    public listLearningOutcomes(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listLearningOutcomes.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesLearningOutcomeSpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/learningOutcomes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of organizations
     * 
     * @param sort 
     * @param direction 
     * @param page 
     * @param size 
     * @param search 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOrganization(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public listOrganization(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public listOrganization(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public listOrganization(sort?: string, direction?: string, page?: number, size?: number, search?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/organizations/specs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of (Accreditation) Organization from Organization
     * 
     * @param oid The Accreditation oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOrgsAccreditation(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesAccreditationSpecLiteView>;
    public listOrgsAccreditation(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesAccreditationSpecLiteView>>;
    public listOrgsAccreditation(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesAccreditationSpecLiteView>>;
    public listOrgsAccreditation(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listOrgsAccreditation.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesAccreditationSpecLiteView>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}/accreditation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The Credential oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listPerformed(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningActivitySpecLiteView>;
    public listPerformed(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningActivitySpecLiteView>>;
    public listPerformed(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningActivitySpecLiteView>>;
    public listPerformed(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listPerformed.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesLearningActivitySpecLiteView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/performed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of subresources
     * 
     * @param oid The LearningAchievement oid
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listSubAchievements(oid: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningAchievementSpecLiteView>;
    public listSubAchievements(oid: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningAchievementSpecLiteView>>;
    public listSubAchievements(oid: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningAchievementSpecLiteView>>;
    public listSubAchievements(oid: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling listSubAchievements.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesLearningAchievementSpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/subAchievements`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Seal a credential in JSON format and download resulting file. Requires a configured local certificate.
     * 
     * @param file The JSON file containig the credential
     * @param password The password for the local certificate 
     * @param signOnBehalf indicates that the credential should be signed on behalf of another organization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sealAndDownloadCredential(file: Blob, password: string, signOnBehalf?: boolean, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public sealAndDownloadCredential(file: Blob, password: string, signOnBehalf?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public sealAndDownloadCredential(file: Blob, password: string, signOnBehalf?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public sealAndDownloadCredential(file: Blob, password: string, signOnBehalf?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling sealAndDownloadCredential.');
        }

        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling sealAndDownloadCredential.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('password', <any>password);
        }
        if (signOnBehalf !== undefined && signOnBehalf !== null) {
            queryParameters = queryParameters.set('signOnBehalf', <any>signOnBehalf);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('_file', <any>file) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/v1/public/credentials/seal`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Seal a credential in JSON format, using the locally stored cert, and sent it to the wallet. Requires a configured local certificate.
     * 
     * @param file The JSON file containing the credential
     * @param password The passworf for the local certificate
     * @param signOnBehalf indicates that the credential should be signed on behalf of another organization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sealAndSendCredential(file: Blob, password: string, signOnBehalf?: boolean, observe?: 'body', reportProgress?: boolean): Observable<PublicSealAndSendView>;
    public sealAndSendCredential(file: Blob, password: string, signOnBehalf?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PublicSealAndSendView>>;
    public sealAndSendCredential(file: Blob, password: string, signOnBehalf?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PublicSealAndSendView>>;
    public sealAndSendCredential(file: Blob, password: string, signOnBehalf?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling sealAndSendCredential.');
        }

        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling sealAndSendCredential.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('password', <any>password);
        }
        if (signOnBehalf !== undefined && signOnBehalf !== null) {
            queryParameters = queryParameters.set('signOnBehalf', <any>signOnBehalf);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('_file', <any>file) || formParams;
        }

        return this.httpClient.post<PublicSealAndSendView>(`${this.basePath}/v1/public/credentials/seal_and_send`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Seal a list of credentials with nexu data
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sealCredentials(body?: Array<SignatureNexuView>, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CredentialView>>;
    public sealCredentials(body?: Array<SignatureNexuView>, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CredentialView>>>;
    public sealCredentials(body?: Array<SignatureNexuView>, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CredentialView>>>;
    public sealCredentials(body?: Array<SignatureNexuView>, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<CredentialView>>(`${this.basePath}/v1/credentials/seal`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Seal a list of credentials using locally stored cert
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sealCredentialsLocalCertificate(body?: LocalSignatureRequestView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CredentialView>>;
    public sealCredentialsLocalCertificate(body?: LocalSignatureRequestView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CredentialView>>>;
    public sealCredentialsLocalCertificate(body?: LocalSignatureRequestView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CredentialView>>>;
    public sealCredentialsLocalCertificate(body?: LocalSignatureRequestView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<CredentialView>>(`${this.basePath}/v1/credentials/seal_local`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Send credentials to owners via email and to their wallet addresses
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendCredentials(body?: Array<CredentialView>, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CredentialView>>;
    public sendCredentials(body?: Array<CredentialView>, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CredentialView>>>;
    public sendCredentials(body?: Array<CredentialView>, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CredentialView>>>;
    public sendCredentials(body?: Array<CredentialView>, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<CredentialView>>(`${this.basePath}/v1/credentials/send`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The LearningAchievement oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAccreditation(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesAccreditationSpecLiteView>;
    public setAccreditation(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesAccreditationSpecLiteView>>;
    public setAccreditation(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesAccreditationSpecLiteView>>;
    public setAccreditation(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setAccreditation.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesAccreditationSpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/accreditation`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing related (Accreditation) to Organization
     * 
     * @param oid The Accreditation oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAccreditation_3(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesAccreditationSpecLiteView>;
    public setAccreditation_3(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesAccreditationSpecLiteView>>;
    public setAccreditation_3(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesAccreditationSpecLiteView>>;
    public setAccreditation_3(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setAccreditation_3.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesAccreditationSpecLiteView>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}/accreditation`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing related organizations to a Accreditation
     * 
     * @param oid The Accreditation oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAccreditingAgent(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOrganizationSpecView>;
    public setAccreditingAgent(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOrganizationSpecView>>;
    public setAccreditingAgent(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOrganizationSpecView>>;
    public setAccreditingAgent(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setAccreditingAgent.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceOrganizationSpecView>(`${this.basePath}/v1/accreditations/specs/${encodeURIComponent(String(oid))}/accreditingAgent`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The Credential oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAchieved(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningAchievementSpecLiteView>;
    public setAchieved(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningAchievementSpecLiteView>>;
    public setAchieved(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningAchievementSpecLiteView>>;
    public setAchieved(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setAchieved.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesLearningAchievementSpecLiteView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/achieved`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing related (AssessedBy) Organization to a assessment
     * 
     * @param oid The Assessment oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAssessedBy(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public setAssessedBy(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public setAssessedBy(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public setAssessedBy(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setAssessedBy.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/assessments/specs/${encodeURIComponent(String(oid))}/assessedBy`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The Credential oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAssessedBy_4(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesAssessmentSpecLiteView>;
    public setAssessedBy_4(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesAssessmentSpecLiteView>>;
    public setAssessedBy_4(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesAssessmentSpecLiteView>>;
    public setAssessedBy_4(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setAssessedBy_4.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesAssessmentSpecLiteView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/assessedBy`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The LearningAchievement oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAwardingBodiesAch(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public setAwardingBodiesAch(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public setAwardingBodiesAch(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public setAwardingBodiesAch(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setAwardingBodiesAch.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/awardingBody`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The LearningActivity oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAwardingBodiesAct(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public setAwardingBodiesAct(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public setAwardingBodiesAct(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public setAwardingBodiesAct(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setAwardingBodiesAct.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/activities/specs/${encodeURIComponent(String(oid))}/awardingBody`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The Assessment oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAwardingBodiesAsm(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public setAwardingBodiesAsm(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public setAwardingBodiesAsm(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public setAwardingBodiesAsm(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setAwardingBodiesAsm.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/assessments/specs/${encodeURIComponent(String(oid))}/awardingBody`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The Entitlement oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAwardingBodiesEnt(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public setAwardingBodiesEnt(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public setAwardingBodiesEnt(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public setAwardingBodiesEnt(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setAwardingBodiesEnt.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/entitlements/specs/${encodeURIComponent(String(oid))}/awardingBody`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing diploma to a credential
     * 
     * @param oid The Diploma oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDiploma(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceDiplomaSpecView>;
    public setDiploma(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceDiplomaSpecView>>;
    public setDiploma(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceDiplomaSpecView>>;
    public setDiploma(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setDiploma.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceDiplomaSpecView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/diploma`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing related (DirectedBy) Organization to a learningActivity
     * 
     * @param oid The LearningActivity oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDirectedBy(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public setDirectedBy(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public setDirectedBy(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public setDirectedBy(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setDirectedBy.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/activities/specs/${encodeURIComponent(String(oid))}/directedBy`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The Credential oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setEntitledTo(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesEntitlementSpecLiteView>;
    public setEntitledTo(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesEntitlementSpecLiteView>>;
    public setEntitledTo(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesEntitlementSpecLiteView>>;
    public setEntitledTo(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setEntitledTo.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesEntitlementSpecLiteView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/entitledTo`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The LearningAchievement oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setEntitlesTo(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesEntitlementSpecLiteView>;
    public setEntitlesTo(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesEntitlementSpecLiteView>>;
    public setEntitlesTo(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesEntitlementSpecLiteView>>;
    public setEntitlesTo(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setEntitlesTo.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesEntitlementSpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/entitlesTo`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing related (hasPart) LearningActivity to a learningActivity
     * 
     * @param oid The LearningActivity oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setHasActPart(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningActivitySpecLiteView>;
    public setHasActPart(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningActivitySpecLiteView>>;
    public setHasActPart(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningActivitySpecLiteView>>;
    public setHasActPart(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setHasActPart.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesLearningActivitySpecLiteView>(`${this.basePath}/v1/activities/specs/${encodeURIComponent(String(oid))}/hasPart`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing related (hasPart) Assessments to a assessment
     * 
     * @param oid The Assessment oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setHasAssPart(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesAssessmentSpecLiteView>;
    public setHasAssPart(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesAssessmentSpecLiteView>>;
    public setHasAssPart(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesAssessmentSpecLiteView>>;
    public setHasAssPart(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setHasAssPart.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesAssessmentSpecLiteView>(`${this.basePath}/v1/assessments/specs/${encodeURIComponent(String(oid))}/hasPart`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing related (hasPart) Entitlements to a entitlement
     * 
     * @param oid The Entitlement oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setHasEntPart(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesEntitlementSpecLiteView>;
    public setHasEntPart(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesEntitlementSpecLiteView>>;
    public setHasEntPart(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesEntitlementSpecLiteView>>;
    public setHasEntPart(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setHasEntPart.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesEntitlementSpecLiteView>(`${this.basePath}/v1/entitlements/specs/${encodeURIComponent(String(oid))}/hasPart`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing related (Influenced) LearningAchievement to a learningActivity
     * 
     * @param oid The LearningActivity oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setInfluenced(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningAchievementSpecLiteView>;
    public setInfluenced(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningAchievementSpecLiteView>>;
    public setInfluenced(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningAchievementSpecLiteView>>;
    public setInfluenced(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setInfluenced.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesLearningAchievementSpecLiteView>(`${this.basePath}/v1/activities/specs/${encodeURIComponent(String(oid))}/influenced`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The LearningAchievement oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setInfluencedBy(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningActivitySpecLiteView>;
    public setInfluencedBy(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningActivitySpecLiteView>>;
    public setInfluencedBy(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningActivitySpecLiteView>>;
    public setInfluencedBy(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setInfluencedBy.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesLearningActivitySpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/influencedBy`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing related organization to a credential
     * 
     * @param oid The Credential oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setIssuer(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOrganizationSpecView>;
    public setIssuer(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOrganizationSpecView>>;
    public setIssuer(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOrganizationSpecView>>;
    public setIssuer(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setIssuer.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceOrganizationSpecView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/issuer`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The LearningAchievement oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setLearningOutcomes(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningOutcomeSpecLiteView>;
    public setLearningOutcomes(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningOutcomeSpecLiteView>>;
    public setLearningOutcomes(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningOutcomeSpecLiteView>>;
    public setLearningOutcomes(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setLearningOutcomes.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesLearningOutcomeSpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/learningOutcomes`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The Credential oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPerformed(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningActivitySpecLiteView>;
    public setPerformed(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningActivitySpecLiteView>>;
    public setPerformed(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningActivitySpecLiteView>>;
    public setPerformed(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setPerformed.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesLearningActivitySpecLiteView>(`${this.basePath}/v1/credentials/specs/${encodeURIComponent(String(oid))}/performed`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource  (Assessment)
     * 
     * @param oid The LearningAchievement oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setProvenBy(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceAssessmentSpecView>;
    public setProvenBy(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAssessmentSpecView>>;
    public setProvenBy(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAssessmentSpecView>>;
    public setProvenBy(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setProvenBy.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceAssessmentSpecView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/provenBy`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource
     * 
     * @param oid The LearningAchievement oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setSubAchievements(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesLearningAchievementSpecLiteView>;
    public setSubAchievements(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesLearningAchievementSpecLiteView>>;
    public setSubAchievements(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesLearningAchievementSpecLiteView>>;
    public setSubAchievements(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setSubAchievements.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesLearningAchievementSpecLiteView>(`${this.basePath}/v1/achievements/specs/${encodeURIComponent(String(oid))}/subAchievements`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing related organizations to a organization
     * 
     * @param oid The Organization oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setSubOrganizationOf(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOrganizationSpecView>;
    public setSubOrganizationOf(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOrganizationSpecView>>;
    public setSubOrganizationOf(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOrganizationSpecView>>;
    public setSubOrganizationOf(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setSubOrganizationOf.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceOrganizationSpecView>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}/subOrganizationOf`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing related organizations to a organization
     * 
     * @param oid The Organization oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setUnitOf(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOrganizationSpecView>;
    public setUnitOf(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOrganizationSpecView>>;
    public setUnitOf(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOrganizationSpecView>>;
    public setUnitOf(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setUnitOf.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResourceOrganizationSpecView>(`${this.basePath}/v1/organizations/specs/${encodeURIComponent(String(oid))}/unitOf`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Link an existing subresource (Organization)
     * 
     * @param oid The Entitlement oid
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setValidWith(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesOrganizationSpecLiteView>;
    public setValidWith(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesOrganizationSpecLiteView>>;
    public setValidWith(oid: number, body?: SubresourcesOids, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesOrganizationSpecLiteView>>;
    public setValidWith(oid: number, body?: SubresourcesOids, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling setValidWith.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResourcesOrganizationSpecLiteView>(`${this.basePath}/v1/entitlements/specs/${encodeURIComponent(String(oid))}/validWith`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an accreditation spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAccreditation(body?: AccreditationSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceAccreditationSpecView>;
    public updateAccreditation(body?: AccreditationSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAccreditationSpecView>>;
    public updateAccreditation(body?: AccreditationSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAccreditationSpecView>>;
    public updateAccreditation(body?: AccreditationSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ResourceAccreditationSpecView>(`${this.basePath}/v1/accreditations/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an assessment spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAssessment(body?: AssessmentSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceAssessmentSpecView>;
    public updateAssessment(body?: AssessmentSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceAssessmentSpecView>>;
    public updateAssessment(body?: AssessmentSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceAssessmentSpecView>>;
    public updateAssessment(body?: AssessmentSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ResourceAssessmentSpecView>(`${this.basePath}/v1/assessments/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a credential spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCredential(body?: EuropassCredentialSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceEuropassCredentialSpecView>;
    public updateCredential(body?: EuropassCredentialSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceEuropassCredentialSpecView>>;
    public updateCredential(body?: EuropassCredentialSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceEuropassCredentialSpecView>>;
    public updateCredential(body?: EuropassCredentialSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ResourceEuropassCredentialSpecView>(`${this.basePath}/v1/credentials/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an diploma spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDiploma(body?: DiplomaSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceDiplomaSpecView>;
    public updateDiploma(body?: DiplomaSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceDiplomaSpecView>>;
    public updateDiploma(body?: DiplomaSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceDiplomaSpecView>>;
    public updateDiploma(body?: DiplomaSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ResourceDiplomaSpecView>(`${this.basePath}/v1/diploma/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an entitlement spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEntitlement(body?: EntitlementSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceEntitlementSpecView>;
    public updateEntitlement(body?: EntitlementSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceEntitlementSpecView>>;
    public updateEntitlement(body?: EntitlementSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceEntitlementSpecView>>;
    public updateEntitlement(body?: EntitlementSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ResourceEntitlementSpecView>(`${this.basePath}/v1/entitlements/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an learningAchievement spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateLearningAchievement(body?: LearningAchievementSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLearningAchievementSpecView>;
    public updateLearningAchievement(body?: LearningAchievementSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLearningAchievementSpecView>>;
    public updateLearningAchievement(body?: LearningAchievementSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLearningAchievementSpecView>>;
    public updateLearningAchievement(body?: LearningAchievementSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ResourceLearningAchievementSpecView>(`${this.basePath}/v1/achievements/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an learningActivity spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateLearningActivity(body?: LearningActivitySpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLearningActivitySpecView>;
    public updateLearningActivity(body?: LearningActivitySpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLearningActivitySpecView>>;
    public updateLearningActivity(body?: LearningActivitySpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLearningActivitySpecView>>;
    public updateLearningActivity(body?: LearningActivitySpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ResourceLearningActivitySpecView>(`${this.basePath}/v1/activities/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an learningOutcome spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateLearningOutcome(body?: LearningOutcomeSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLearningOutcomeSpecView>;
    public updateLearningOutcome(body?: LearningOutcomeSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLearningOutcomeSpecView>>;
    public updateLearningOutcome(body?: LearningOutcomeSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLearningOutcomeSpecView>>;
    public updateLearningOutcome(body?: LearningOutcomeSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ResourceLearningOutcomeSpecView>(`${this.basePath}/v1/learningOutcomes/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an organization spec
     * 
     * @param body 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateOrganization(body?: OrganizationSpecView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceOrganizationSpecView>;
    public updateOrganization(body?: OrganizationSpecView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceOrganizationSpecView>>;
    public updateOrganization(body?: OrganizationSpecView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceOrganizationSpecView>>;
    public updateOrganization(body?: OrganizationSpecView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ResourceOrganizationSpecView>(`${this.basePath}/v1/organizations/specs`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
