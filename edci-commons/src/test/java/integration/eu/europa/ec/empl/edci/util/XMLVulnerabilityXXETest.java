package integration.eu.europa.ec.empl.edci.util;

import eu.europa.ec.empl.edci.constants.EDCIConstants;
import eu.europa.ec.empl.edci.datamodel.utils.NamespaceResolver;
import eu.europa.ec.empl.edci.exception.EDCIException;
import eu.europa.ec.empl.edci.sanitizer.EDCISanitizedHtml;
import eu.europa.ec.empl.edci.service.EDCIMessageService;
import eu.europa.ec.empl.edci.util.EDCICredentialModelUtil;
import eu.europa.ec.empl.edci.util.HtmlSanitizerUtil;
import eu.europa.ec.empl.edci.util.XmlUtil;
import integration.eu.europa.ec.empl.base.AbstractIntegrationBaseTest;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.joda.time.Period;
import org.joda.time.format.PeriodFormat;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.springframework.context.i18n.LocaleContextHolder;
import org.w3c.dom.Document;
import org.xml.sax.SAXParseException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Date;

public class XMLVulnerabilityXXETest extends AbstractIntegrationBaseTest {

    @Spy
    private XmlUtil xmlUtil;

    private Document buildCredentialDoc(String xmlFile) throws Exception {
        File resource = new File(xmlFile);
        Document doc = null;

        try {

            DocumentBuilderFactory factory = xmlUtil.getDocumentBuilderFactory();

            DocumentBuilder builder = factory.newDocumentBuilder();
            doc = builder.parse(resource);

        } catch (Exception e) {
            throw e;
        }

        return doc;
    }

    private static String writeXmlToString(Document doc)
            throws TransformerException {

        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource source = new DOMSource(doc);
        StringWriter result = new StringWriter();
        transformer.transform(source, new StreamResult(result));
        return result.getBuffer().toString().replaceAll("\n|\r", "");

    }

    protected Object getXPathElem(Document doc, XPath xpath, String expression) throws XPathExpressionException {
        XPathExpression expr = xpath.compile(expression);
        Object returnValue = null;
        returnValue = expr.evaluate(doc);
        return returnValue;
    }

    @Test(expected = SAXParseException.class)
    public void buildCredentialDoc_shouldNotHaveXXEVulnerability_whenParsingXMLEntities() throws Exception {

        Document doc = buildCredentialDoc("src/test/resources/xxeTest/xxe_entity.xml");
        String outputXML = writeXmlToString(doc);

    }

    @Test(expected = SAXParseException.class)
    public void buildCredentialDoc_shouldNotHaveXXEVulnerability_whenParsingXMLFileReferences() throws Exception {

        Document doc = buildCredentialDoc("src/test/resources/xxeTest/xxe_file.xml");
        String outputXML = writeXmlToString(doc);

    }

    @Test(expected = SAXParseException.class)
    public void buildCredentialDoc_shouldNotHaveXXEVulnerability_whenParsingXMLWithDosAttack() throws Exception {

        Document doc = buildCredentialDoc("src/test/resources/xxeTest/xxe_dos.xml");
        String outputXML = writeXmlToString(doc);

    }

    @Test(expected = SAXParseException.class)
    public void buildCredentialDoc_shouldNotHaveXXEVulnerability_whenParsingXMLWithRermoteRefs() throws Exception {

        Document doc = buildCredentialDoc("src/test/resources/xxeTest/xxe_remote.xml");
        String outputXML = writeXmlToString(doc);

    }

    @Test(expected = SAXParseException.class)
    public void buildCredentialDoc_shouldNotHaveXXEVulnerability_whenParsingXMLWithBase64() throws Exception {

        Document doc = buildCredentialDoc("src/test/resources/xxeTest/xxe_base64.xml");
        String outputXML = writeXmlToString(doc);

    }

}
