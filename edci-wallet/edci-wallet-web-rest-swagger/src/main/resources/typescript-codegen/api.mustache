// tslint:disable:no-unused-variable member-ordering
// noinspection ES6UnusedImports

import {serialize, deserialize, deserializeArray, plainToClass, classToPlain} from 'class-transformer';
import {Inject, Injectable, Optional, InjectionToken} from '@angular/core';
import {
  Http,
  Headers,
  URLSearchParams,
  RequestMethod,
  RequestOptions,
  RequestOptionsArgs,
  Response,
  ResponseContentType
} from '@angular/http';
import {Observable} from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import * as models from '../model/models';
import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';
import {ClassType} from '../classType';

{{#operations}}

export const I{{classname}} = new InjectionToken('I{{classname}}');

{{#description}}
/**
 * {{&description}}
 */
{{/description}}
export interface I{{classname}} {


{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{^returnTypeIsPrimitive}}
     * @param c 
     {{/returnTypeIsPrimitive}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}*/
  {{#returnTypeIsPrimitive}}
    {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^-last}}, {{/-last}} {{/allParams}}): Observable<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}>;
  {{/returnTypeIsPrimitive}}
  {{^returnTypeIsPrimitive}}
    {{nickname}}<T extends {{returnBaseType}}>({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}c?: ClassType<T>): Observable<{{#returnType}}T{{#isListContainer}}[]{{/isListContainer}}{{/returnType}}{{^returnType}}{}{{/returnType}}>;
  {{/returnTypeIsPrimitive}}
{{/operation}}

}

{{#description}}
/**
 * {{&description}}
 */
{{/description}}
@Injectable()
export class {{classname}} implements I{{classname}} {
    protected basePath = '{{basePath}}';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http,
                @Optional() @Inject(BASE_PATH) basePath: string,
                @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

{{#operation}}

  {{#returnTypeIsPrimitive}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}*/
    public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^-last}}, {{/-last}} {{/allParams}}): Observable<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}> {
        return this.{{nickname}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}})
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }
    {{/returnTypeIsPrimitive}}

  {{^returnTypeIsPrimitive}}
    /**
     * {{summary}}
     * {{notes}}
     * @param c
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}*/
    {{nickname}}<T extends {{returnBaseType}}>({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}c?: ClassType<T>): Observable<{{#returnType}}T{{#isListContainer}}[]{{/isListContainer}}{{/returnType}}{{^returnType}}{}{{/returnType}}> {
{{^isListContainer}}        // noinspection TypeScriptValidateTypes{{/isListContainer}}
        return this.{{nickname}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}})
                .map((response: Response) => {
                    if (response.status === 204) {
                        return undefined;
                    } else if (c) {
                        {{#isListContainer}}
                        return deserializeArray(c, response.text());
                        {{/isListContainer}}
                        {{^isListContainer}}
                        return deserialize(c, response.text());
                        {{/isListContainer}}
                    } else {
                        return response.json();
                    }
                });
        }

  {{/returnTypeIsPrimitive}}

{{/operation}}

{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}*/
    private {{nickname}}WithHttpInfo({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^-last}}, {{/-last}} {{/allParams}}): Observable<Response> {
        const path = this.basePath + `{{path}}`;
{{#pathParams}}//        .replace('{' + '{{baseName}}' + '}', String({{paramName}})){{#-last}}; {{/-last}} 
// not needed as long as the Angular2Typescript language generates the path as TypeScript template string 
// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html){{/pathParams}}

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
{{#hasFormParams}}
        let formParams = new URLSearchParams();

{{/hasFormParams}}
{{#allParams}}
{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
{{/required}}
{{/allParams}}
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            queryParameters.set('{{baseName}}', <any>{{paramName}});
        }
{{/queryParams}}

{{#headers}}
        headers.set('{{baseName}}', String({{paramName}}));

{{/headers}}


{{#authMethods}}
        // authentication ({{name}}) required
{{#isApiKey}}
{{#isKeyInHeader}}
        if (this.configuration.apiKey)
        {
            headers.set('{{keyParamName}}', this.configuration.apiKey);
        }
{{/isKeyInHeader}}
{{#isKeyInQuery}}
        if (this.configuration.apiKey)
        {
            formParams.set('{{keyParamName}}', this.configuration.apiKey);
        }
{{/isKeyInQuery}}
{{/isApiKey}}
{{#isBasic}}
        // http basic authentication required
        if (this.configuration.username || this.configuration.password)
        {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
{{/isBasic}}
{{#isOAuth}}
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
{{/isOAuth}}
{{/authMethods}}

{{#hasFormParams}}
        headers.set('Content-Type', 'application/x-www-form-urlencoded');
{{/hasFormParams}}

{{#bodyParam}}
        headers.set('Content-Type', 'application/json');
{{/bodyParam}}

{{#formParams}}
        if ({{paramName}} !== undefined) {
            formParams.set('{{baseName}}', <any>{{paramName}}); 
        }
{{/formParams}}

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: {{httpMethod}},
            headers: headers,
{{#bodyParam}}
            body: {{paramName}} == null ? '' : /*JSON.stringify*/classToPlain({{paramName}}), // https://github.com/angular/angular/issues/10612
{{/bodyParam}}
{{#hasFormParams}}
            body: formParams.toString(),
{{/hasFormParams}}
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

{{/operation}}
}
{{/operations}}