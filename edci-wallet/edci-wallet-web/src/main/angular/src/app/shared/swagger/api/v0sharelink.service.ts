/**
 * Wallet API
 * API Wallet description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: edci.support@eu.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

<<<<<<< HEAD
=======
import { ByteArrayResource } from '../model/byteArrayResource';
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
import { ShareLinkInfoView } from '../model/shareLinkInfoView';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class V0sharelinkService {

    protected basePath = 'http://localhost:8080/europass2/edci-wallet/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Download Shared Link Credential
     * 
     * @param shareHash 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadShareLinkCredential(shareHash: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public downloadShareLinkCredential(shareHash: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public downloadShareLinkCredential(shareHash: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public downloadShareLinkCredential(shareHash: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling downloadShareLinkCredential.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/sharelink/download/${encodeURIComponent(String(shareHash))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
<<<<<<< HEAD
     * Get Shared Presentation XML
=======
     * Get Shared Presentation PDF
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
     * 
     * @param shareHash 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
<<<<<<< HEAD
    public downloadShareLinkPresentationXML(shareHash: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public downloadShareLinkPresentationXML(shareHash: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public downloadShareLinkPresentationXML(shareHash: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public downloadShareLinkPresentationXML(shareHash: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling downloadShareLinkPresentationXML.');
=======
    public downloadShareLinkPresentationPDF(shareHash: string, observe?: 'body', reportProgress?: boolean): Observable<ByteArrayResource>;
    public downloadShareLinkPresentationPDF(shareHash: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteArrayResource>>;
    public downloadShareLinkPresentationPDF(shareHash: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteArrayResource>>;
    public downloadShareLinkPresentationPDF(shareHash: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling downloadShareLinkPresentationPDF.');
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
<<<<<<< HEAD
            'application/octet-stream'
=======
            'application/pdf'
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

<<<<<<< HEAD
        return this.httpClient.get<Array<string>>(`${this.basePath}/sharelink/presentation/${encodeURIComponent(String(shareHash))}`,
=======
        return this.httpClient.get<ByteArrayResource>(`${this.basePath}/sharelink/presentation/${encodeURIComponent(String(shareHash))}`,
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Share Link
     * 
     * @param shareHash 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getShareLink(shareHash: string, observe?: 'body', reportProgress?: boolean): Observable<ShareLinkInfoView>;
    public getShareLink(shareHash: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShareLinkInfoView>>;
    public getShareLink(shareHash: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShareLinkInfoView>>;
    public getShareLink(shareHash: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling getShareLink.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ShareLinkInfoView>(`${this.basePath}/sharelink/fetch/${encodeURIComponent(String(shareHash))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
