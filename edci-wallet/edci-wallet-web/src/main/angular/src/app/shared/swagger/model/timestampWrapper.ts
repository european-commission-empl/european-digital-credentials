/**
 * Wallet API
 * API Wallet description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: edci.support@eu.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XmlChainItem } from './xmlChainItem';
import { XmlDigestMatcher } from './xmlDigestMatcher';
import { XmlTimestampedObject } from './xmlTimestampedObject';


export interface TimestampWrapper { 
    id?: string;
    type?: string;
    binaries?: Array<string>;
    digestMatchers?: Array<XmlDigestMatcher>;
<<<<<<< HEAD
    messageImprintDataIntact?: boolean;
    messageImprint?: XmlDigestMatcher;
    productionTime?: Date;
    timestampedObjects?: Array<XmlTimestampedObject>;
    messageImprintDataFound?: boolean;
    signatureValid?: boolean;
    certificateChain?: Array<XmlChainItem>;
    digestAlgorithm?: TimestampWrapper.DigestAlgorithmEnum;
    trustedChain?: boolean;
    signingCertificateId?: string;
    certificateChainIds?: Array<string>;
    encryptionAlgorithm?: TimestampWrapper.EncryptionAlgorithmEnum;
    maskGenerationFunction?: TimestampWrapper.MaskGenerationFunctionEnum;
    digestValuePresent?: boolean;
    keyLengthUsedToSignThisToken?: string;
    firstChainCertificateId?: string;
    signatureIntact?: boolean;
    lastChainCertificateId?: string;
    issuerSerialMatch?: boolean;
    firstChainCertificate?: XmlChainItem;
    digestValueMatch?: boolean;
    digestAlgoUsedToSignThisToken?: string;
    lastChainCertificateSource?: string;
    lastChainCertificate?: XmlChainItem;
    attributePresent?: boolean;
    encryptionAlgoUsedToSignThisToken?: string;
    maskGenerationFunctionUsedToSignThisToken?: string;
=======
    productionTime?: Date;
    messageImprintDataFound?: boolean;
    messageImprintDataIntact?: boolean;
    timestampedObjects?: Array<XmlTimestampedObject>;
    messageImprint?: XmlDigestMatcher;
    certificateChain?: Array<XmlChainItem>;
    digestAlgorithm?: TimestampWrapper.DigestAlgorithmEnum;
    trustedChain?: boolean;
    signatureValid?: boolean;
    signingCertificateId?: string;
    certificateChainIds?: Array<string>;
    maskGenerationFunction?: TimestampWrapper.MaskGenerationFunctionEnum;
    encryptionAlgorithm?: TimestampWrapper.EncryptionAlgorithmEnum;
    lastChainCertificate?: XmlChainItem;
    digestValueMatch?: boolean;
    issuerSerialMatch?: boolean;
    signatureIntact?: boolean;
    keyLengthUsedToSignThisToken?: string;
    attributePresent?: boolean;
    digestValuePresent?: boolean;
    lastChainCertificateId?: string;
    firstChainCertificateId?: string;
    digestAlgoUsedToSignThisToken?: string;
    lastChainCertificateSource?: string;
    firstChainCertificate?: XmlChainItem;
    maskGenerationFunctionUsedToSignThisToken?: string;
    encryptionAlgoUsedToSignThisToken?: string;
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
}
export namespace TimestampWrapper {
    export type DigestAlgorithmEnum = 'SHA1' | 'SHA224' | 'SHA256' | 'SHA384' | 'SHA512' | 'SHA3_224' | 'SHA3_256' | 'SHA3_384' | 'SHA3_512' | 'RIPEMD160' | 'MD2' | 'MD5';
    export const DigestAlgorithmEnum = {
        SHA1: 'SHA1' as DigestAlgorithmEnum,
        SHA224: 'SHA224' as DigestAlgorithmEnum,
        SHA256: 'SHA256' as DigestAlgorithmEnum,
        SHA384: 'SHA384' as DigestAlgorithmEnum,
        SHA512: 'SHA512' as DigestAlgorithmEnum,
        SHA3224: 'SHA3_224' as DigestAlgorithmEnum,
        SHA3256: 'SHA3_256' as DigestAlgorithmEnum,
        SHA3384: 'SHA3_384' as DigestAlgorithmEnum,
        SHA3512: 'SHA3_512' as DigestAlgorithmEnum,
        RIPEMD160: 'RIPEMD160' as DigestAlgorithmEnum,
        MD2: 'MD2' as DigestAlgorithmEnum,
        MD5: 'MD5' as DigestAlgorithmEnum
    };
<<<<<<< HEAD
=======
    export type MaskGenerationFunctionEnum = 'MGF1';
    export const MaskGenerationFunctionEnum = {
        MGF1: 'MGF1' as MaskGenerationFunctionEnum
    };
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
    export type EncryptionAlgorithmEnum = 'RSA' | 'DSA' | 'ECDSA' | 'PLAIN_ECDSA' | 'HMAC';
    export const EncryptionAlgorithmEnum = {
        RSA: 'RSA' as EncryptionAlgorithmEnum,
        DSA: 'DSA' as EncryptionAlgorithmEnum,
        ECDSA: 'ECDSA' as EncryptionAlgorithmEnum,
        PLAINECDSA: 'PLAIN_ECDSA' as EncryptionAlgorithmEnum,
        HMAC: 'HMAC' as EncryptionAlgorithmEnum
    };
<<<<<<< HEAD
    export type MaskGenerationFunctionEnum = 'MGF1';
    export const MaskGenerationFunctionEnum = {
        MGF1: 'MGF1' as MaskGenerationFunctionEnum
    };
=======
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
}
