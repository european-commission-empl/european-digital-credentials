/**
 * Wallet API
 * API Wallet description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: edci.support@eu.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ApiErrorMessage } from '../model/apiErrorMessage';
<<<<<<< HEAD
import { ByteArrayResource } from '../model/byteArrayResource';
=======
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
import { PagedResourcesShareLinkInfoView } from '../model/pagedResourcesShareLinkInfoView';
import { ResourceShareLinkInfoView } from '../model/resourceShareLinkInfoView';
import { ShareLinkView } from '../model/shareLinkView';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class V1sharelinksService {

    protected basePath = 'http://localhost:8080/europass2/edci-wallet/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete Share Link of a Credential
     * 
     * @param shareHash 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteShareLink(shareHash: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceShareLinkInfoView>;
    public deleteShareLink(shareHash: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceShareLinkInfoView>>;
    public deleteShareLink(shareHash: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceShareLinkInfoView>>;
    public deleteShareLink(shareHash: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling deleteShareLink.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ResourceShareLinkInfoView>(`${this.basePath}/v1/sharelinks/${encodeURIComponent(String(shareHash))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Download Shared Link Credential
     * 
     * @param shareHash 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadShareLinkCredential(shareHash: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public downloadShareLinkCredential(shareHash: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public downloadShareLinkCredential(shareHash: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public downloadShareLinkCredential(shareHash: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling downloadShareLinkCredential.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/v1/sharelinks/${encodeURIComponent(String(shareHash))}/credentials`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
<<<<<<< HEAD
     * Get Shared Presentation PDF
=======
     * Get Shared Presentation XML
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
     * 
     * @param shareHash 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
<<<<<<< HEAD
    public downloadShareLinkPresentationPDF(shareHash: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ByteArrayResource>;
    public downloadShareLinkPresentationPDF(shareHash: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteArrayResource>>;
    public downloadShareLinkPresentationPDF(shareHash: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteArrayResource>>;
    public downloadShareLinkPresentationPDF(shareHash: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling downloadShareLinkPresentationPDF.');
=======
    public downloadShareLinkPresentationXML(shareHash: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public downloadShareLinkPresentationXML(shareHash: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public downloadShareLinkPresentationXML(shareHash: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public downloadShareLinkPresentationXML(shareHash: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling downloadShareLinkPresentationXML.');
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
<<<<<<< HEAD
            'application/pdf'
=======
            'application/octet-stream'
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

<<<<<<< HEAD
        return this.httpClient.get<ByteArrayResource>(`${this.basePath}/v1/sharelinks/${encodeURIComponent(String(shareHash))}/presentation`,
=======
        return this.httpClient.get<Array<string>>(`${this.basePath}/v1/sharelinks/${encodeURIComponent(String(shareHash))}/presentation`,
>>>>>>> 98214b45d868ddd254c561669c1269836e81bd88
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Share Link of a Credential
     * 
     * @param shareHash 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getShareLink(shareHash: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceShareLinkInfoView>;
    public getShareLink(shareHash: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceShareLinkInfoView>>;
    public getShareLink(shareHash: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceShareLinkInfoView>>;
    public getShareLink(shareHash: string, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling getShareLink.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ResourceShareLinkInfoView>(`${this.basePath}/v1/sharelinks/${encodeURIComponent(String(shareHash))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Share Link given a wallet address
     * 
     * @param userId 
     * @param sort 
     * @param direction 
     * @param page 
     * @param size 
     * @param expired 
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listShareLink(userId: string, sort?: string, direction?: string, page?: number, size?: number, expired?: boolean, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResourcesShareLinkInfoView>;
    public listShareLink(userId: string, sort?: string, direction?: string, page?: number, size?: number, expired?: boolean, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResourcesShareLinkInfoView>>;
    public listShareLink(userId: string, sort?: string, direction?: string, page?: number, size?: number, expired?: boolean, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResourcesShareLinkInfoView>>;
    public listShareLink(userId: string, sort?: string, direction?: string, page?: number, size?: number, expired?: boolean, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling listShareLink.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (expired !== undefined && expired !== null) {
            queryParameters = queryParameters.set('expired', <any>expired);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResourcesShareLinkInfoView>(`${this.basePath}/v1/sharelinks`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Share Link of a Credential
     * 
     * @param shareHash 
     * @param body share link information
     * @param locale locale
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateShareLink(shareHash: string, body: ShareLinkView, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceShareLinkInfoView>;
    public updateShareLink(shareHash: string, body: ShareLinkView, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceShareLinkInfoView>>;
    public updateShareLink(shareHash: string, body: ShareLinkView, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceShareLinkInfoView>>;
    public updateShareLink(shareHash: string, body: ShareLinkView, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shareHash === null || shareHash === undefined) {
            throw new Error('Required parameter shareHash was null or undefined when calling updateShareLink.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateShareLink.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ResourceShareLinkInfoView>(`${this.basePath}/v1/sharelinks/${encodeURIComponent(String(shareHash))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
